#端口号
server.port=8800
#访问路径
server.servlet.context-path=/demo
#mybatis配置路径
mybatis.config-location=classpath:mybatis/mybatis-config.xml
#mapper文件路径
mybatis.mapper-locations=classpath:mybatis/mapper/*.xml
#日志文件
logging.file.path=/demo_log/log
#日志输出等级
logging.level.com.hkj.demo=debug
#数据库连接池
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.druid.filter.wall.config.multi-statement-allow=true
spring.datasource.url=jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&useSSL=true&allowMultiQueries=true

#spring.datasource.url=jdbc:mysql://rm-wz90qf13ikffflj3lxo.mysql.rds.aliyuncs.com:3306/ec_cywl_1.0?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&useSSL=true&allowMultiQueries=true
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.druid.initial-size=5
spring.datasource.druid.min-idle=5
spring.datasource.druid.max-active=100
spring.datasource.druid.max-wait=60000
spring.datasource.druid.test-while-idle=true
spring.datasource.druid.time-between-eviction-runs-millis=60000
spring.datasource.druid.min-evictable-idle-time-millis=30000
spring.datasource.druid.validation-query=select 'x'
spring.datasource.druid.test-on-borrow=false
spring.datasource.druid.test-on-return=false
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20
spring.datasource.druid.filters=stat
spring.datasource.druid.connection-properties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
spring.datasource.druid.use-global-data-source-stat=true

token.security=HKJ_SECURITY

#============== kafka ===================
#kafka配置
logging.level.root=INFO
#spring.kafka.producer.bootstrap-servers=106.14.250.7:9092
spring.application.name=kafka-hkj

# 指定kafka 代理地址，可以多个
spring.kafka.bootstrap-servers=106.14.250.7:9092

#=============== provider  =======================
#重试次数
spring.kafka.producer.retries=0
# 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
spring.kafka.producer.acks=1
# 每次批量发送消息的数量
spring.kafka.producer.batch-size=16384

# 生产端缓冲区大小
spring.kafka.producer.buffer-memory=33554432
# 提交延时
spring.kafka.producer.properties.linger.ms=0
# 当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka
# linger.ms为0表示每接收到一条消息就提交给kafka,这时候batch-size其实就没用了

# 指定消息key和消息体的编解码方式
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

#=============== 初始化消费者consumer  =======================
# 指定默认消费者group id
# 默认的消费组ID
spring.kafka.consumer.properties.group.id=defaultConsumerGroup
#spring.kafka.consumer.group-id=user-log-group
# 是否自动提交offset
spring.kafka.consumer.enable-auto-commit=true
# 提交offset延时(接收到消息后多久提交offset)
spring.kafka.consumer.auto.commit.interval.ms=1000
# 当kafka中没有初始offset或offset超出范围时将自动重置offset
# earliest:重置为分区中最小的offset;
# latest:重置为分区中最新的offset(消费分区中新产生的数据);
# none:只要有一个分区不存在已提交的offset,就抛出异常;
spring.kafka.consumer.auto-offset-reset=latest
# 消费会话超时时间(超过这个时间consumer没有发送心跳,就会触发rebalance操作)
spring.kafka.consumer.properties.session.timeout.ms=120000
# 消费请求超时时间
spring.kafka.consumer.properties.request.timeout.ms=180000

# 指定消息key和消息体的编解码方式,序列化反序列化
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# 消费端监听的topic不存在时，项目启动会报错(关掉)
spring.kafka.listener.missing-topics-fatal=false
# 设置批量消费
# spring.kafka.listener.type=batch
# 批量消费每次最多消费多少条消息
# spring.kafka.consumer.max-poll-records=50